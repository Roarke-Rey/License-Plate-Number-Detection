# -*- coding: utf-8 -*-
"""CVProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pt0FNyy_PhL3JjZj0LAy5ehSnci6aYFA
"""

!sudo apt install tesseract-ocr
!pip install pytesseract
!pip install easyocr

import cv2
import imutils
import pytesseract
import numpy as np
import pandas as pd
from google.colab.patches import cv2_imshow
import easyocr

# Mount your Google Drive to this notebook
# The purpose is to allow your code to access to your files
from google.colab import drive
drive.mount('/content/drive')
import os
os.chdir('/content/drive/MyDrive/Colab Notebooks/dataset')

"""# Final Code"""

def handle_image_opencv(image, smoothing_technique, edge_detection, reader):
  image = cv2.imread(image)
  image = imutils.resize(image, width=300 )

  # Greyscaling
  gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

  # Smoothing
  if smoothing_technique == "Gaussian":
    smooth_image = cv2.GaussianBlur(gray_image,(5,5),0) 
  elif smoothing_technique == "MedianBlur":
    smooth_image = cv2.medianBlur(gray_image,3)                        
  elif smoothing_technique == "BilateralFilter":
    smooth_image = cv2.bilateralFilter(gray_image, 11, 17, 17) 

  # Edge detector
  if edge_detection == "Canny":
    edged = cv2.Canny(smooth_image, 30, 200) 
  elif edge_detection == "Laplacian":
    edged = cv2.Laplacian(smooth_image, ddepth=cv2.CV_8UC1)                         
  elif edge_detection == "Sobel":
    edged = cv2.Sobel(src=smooth_image, ddepth=cv2.CV_8UC1, dx=0, dy=1, ksize=5)   


  cnts,new = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
  # image1=image.copy()
  # cv2.drawContours(image1,cnts,-1,(0,255,0),3)
  # cv2_imshow(image1)

  cnts = sorted(cnts, key = cv2.contourArea, reverse = True) [:30]
  # image2 = image.copy()
  # cv2.drawContours(image2,cnts,-1,(0,255,0),3)
  # cv2_imshow(image2)

  # Getting the contours with 4 points (rectange)
  screenCnt = []
  for c in cnts:
          perimeter = cv2.arcLength(c, True)
          approx = cv2.approxPolyDP(c, 0.018 * perimeter, True)
          if len(approx) == 4: 
            screenCnt = approx
            x,y,w,h = cv2.boundingRect(c) 
            new_img=image[y:y+h,x:x+w]
            break

  if len(screenCnt)>0:
    cv2.drawContours(image, [screenCnt], -1, (0, 255, 0), 3)
    cv2_imshow(image)
  else:
    print("Cant locate the number plate")
    return 0
  
  result = reader.readtext(new_img)
  if len(result)>0:
    print("Number plate:", result[0][1],"\nAccuracy:", result[0][-1])
    return result[0][-1]
  else:
    print("Could not read the license plate") 
    return -1

def find_accuracies_for_images(smoothing_technique, edge_detection, reader):
  image_names = []
  accuracies = []
  for image in os.listdir("."):
      if image.endswith("png"): 
          image_names.append(image)
          accuracies.append(handle_image_opencv(image, smoothing_technique, edge_detection, reader))

  return image_names, accuracies

reader = easyocr.Reader(['en'])

performance_dict = {}
image_names = []

smoothing_algos = ["Gaussian", "MedianBlur", "BilateralFilter"]
edge_algos = ["Canny", "Laplacian", "Sobel"]

for smoothing_tech in smoothing_algos:
  image_names, accuracies = find_accuracies_for_images(smoothing_tech, "Canny", reader)
  performance_dict[smoothing_tech] = accuracies

for edge_tech in edge_algos:
  image_names, accuracies = find_accuracies_for_images("Gaussian", edge_tech, reader)
  performance_dict[edge_tech] = accuracies

performance_dict["image_names"] = image_names

evaluation_data = pd.DataFrame(data=performance_dict)

evaluation_data.to_csv("evaluation.csv", index=False)

